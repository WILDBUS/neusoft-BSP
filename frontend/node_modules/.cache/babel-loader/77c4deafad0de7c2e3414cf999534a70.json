{"remainingRequest":"E:\\实训\\实训\\frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\实训\\实训\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\实训\\实训\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\实训\\实训\\frontend\\src\\views\\system\\user\\profile\\resetPwd.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\实训\\实训\\frontend\\src\\views\\system\\user\\profile\\resetPwd.vue","mtime":1594018137818},{"path":"E:\\实训\\实训\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\实训\\实训\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\实训\\实训\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\实训\\实训\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _user = require(\"@/api/system/user\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  data: function data() {\n    var _this = this;\n\n    var equalToPassword = function equalToPassword(rule, value, callback) {\n      if (_this.user.newPassword !== value) {\n        callback(new Error(\"Passwords entered twice are not same\"));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      test: \"1test\",\n      user: {\n        oldPassword: undefined,\n        newPassword: undefined,\n        confirmPassword: undefined\n      },\n      // 表单校验\n      rules: {\n        oldPassword: [{\n          required: true,\n          message: \"Old password cannot be empty\",\n          trigger: \"blur\"\n        }],\n        newPassword: [{\n          required: true,\n          message: \"New password cannot be empty\",\n          trigger: \"blur\"\n        }, {\n          min: 6,\n          max: 20,\n          message: \"Length between 6 and 20\",\n          trigger: \"blur\"\n        }],\n        confirmPassword: [{\n          required: true,\n          message: \"Confirm password can not be blank\",\n          trigger: \"blur\"\n        }, {\n          required: true,\n          validator: equalToPassword,\n          trigger: \"blur\"\n        }]\n      }\n    };\n  },\n  methods: {\n    submit: function submit() {\n      var _this2 = this;\n\n      this.$refs[\"form\"].validate(function (valid) {\n        if (valid) {\n          (0, _user.updateUserPwd)(_this2.user.oldPassword, _this2.user.newPassword).then(function (response) {\n            if (response.code === 200) {\n              _this2.msgSuccess(\"Successfully modified\");\n            }\n          });\n        }\n      });\n    },\n    close: function close() {\n      this.$store.dispatch(\"tagsView/delView\", this.$route);\n      this.$router.push({\n        path: \"/index\"\n      });\n    }\n  }\n};\nexports.default = _default;",{"version":3,"sources":["resetPwd.vue"],"names":[],"mappings":";;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;eAEA;AACA,EAAA,IADA,kBACA;AAAA;;AACA,QAAA,eAAA,GAAA,SAAA,eAAA,CAAA,IAAA,EAAA,KAAA,EAAA,QAAA,EAAA;AACA,UAAA,KAAA,CAAA,IAAA,CAAA,WAAA,KAAA,KAAA,EAAA;AACA,QAAA,QAAA,CAAA,IAAA,KAAA,CAAA,sCAAA,CAAA,CAAA;AACA,OAFA,MAEA;AACA,QAAA,QAAA;AACA;AACA,KANA;;AAOA,WAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,IAAA,EAAA;AACA,QAAA,WAAA,EAAA,SADA;AAEA,QAAA,WAAA,EAAA,SAFA;AAGA,QAAA,eAAA,EAAA;AAHA,OAFA;AAOA;AACA,MAAA,KAAA,EAAA;AACA,QAAA,WAAA,EAAA,CACA;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,UAAA,OAAA,EAAA,8BAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SADA,CADA;AAIA,QAAA,WAAA,EAAA,CACA;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,UAAA,OAAA,EAAA,8BAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SADA,EAEA;AAAA,UAAA,GAAA,EAAA,CAAA;AAAA,UAAA,GAAA,EAAA,EAAA;AAAA,UAAA,OAAA,EAAA,yBAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SAFA,CAJA;AAQA,QAAA,eAAA,EAAA,CACA;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,UAAA,OAAA,EAAA,mCAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SADA,EAEA;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,UAAA,SAAA,EAAA,eAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SAFA;AARA;AARA,KAAA;AAsBA,GA/BA;AAgCA,EAAA,OAAA,EAAA;AACA,IAAA,MADA,oBACA;AAAA;;AACA,WAAA,KAAA,CAAA,MAAA,EAAA,QAAA,CAAA,UAAA,KAAA,EAAA;AACA,YAAA,KAAA,EAAA;AACA,mCAAA,MAAA,CAAA,IAAA,CAAA,WAAA,EAAA,MAAA,CAAA,IAAA,CAAA,WAAA,EAAA,IAAA,CACA,UAAA,QAAA,EAAA;AACA,gBAAA,QAAA,CAAA,IAAA,KAAA,GAAA,EAAA;AACA,cAAA,MAAA,CAAA,UAAA,CAAA,uBAAA;AACA;AACA,WALA;AAOA;AACA,OAVA;AAWA,KAbA;AAcA,IAAA,KAdA,mBAcA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,kBAAA,EAAA,KAAA,MAAA;AACA,WAAA,OAAA,CAAA,IAAA,CAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAAA;AACA;AAjBA;AAhCA,C","sourcesContent":["<template>\r\n  <el-form ref=\"form\" :model=\"user\" :rules=\"rules\" label-width=\"80px\">\r\n    <el-form-item label=\"Old\" prop=\"oldPassword\">\r\n      <el-input v-model=\"user.oldPassword\" placeholder=\"Please enter the old password\" type=\"password\" />\r\n    </el-form-item>\r\n    <el-form-item label=\"New\" prop=\"newPassword\">\r\n      <el-input v-model=\"user.newPassword\" placeholder=\"Please enter the new password\" type=\"password\" />\r\n    </el-form-item>\r\n    <el-form-item label=\"Confirm\" prop=\"confirmPassword\">\r\n      <el-input v-model=\"user.confirmPassword\" placeholder=\"Please confirm your password\" type=\"password\" />\r\n    </el-form-item>\r\n    <el-form-item>\r\n      <el-button type=\"primary\" size=\"mini\" @click=\"submit\">Submit</el-button>\r\n      <el-button type=\"danger\" size=\"mini\" @click=\"close\">Close</el-button>\r\n    </el-form-item>\r\n  </el-form>\r\n</template>\r\n\r\n<script>\r\nimport { updateUserPwd } from \"@/api/system/user\";\r\n\r\nexport default {\r\n  data() {\r\n    const equalToPassword = (rule, value, callback) => {\r\n      if (this.user.newPassword !== value) {\r\n        callback(new Error(\"Passwords entered twice are not same\"));\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n    return {\r\n      test: \"1test\",\r\n      user: {\r\n        oldPassword: undefined,\r\n        newPassword: undefined,\r\n        confirmPassword: undefined\r\n      },\r\n      // 表单校验\r\n      rules: {\r\n        oldPassword: [\r\n          { required: true, message: \"Old password cannot be empty\", trigger: \"blur\" }\r\n        ],\r\n        newPassword: [\r\n          { required: true, message: \"New password cannot be empty\", trigger: \"blur\" },\r\n          { min: 6, max: 20, message: \"Length between 6 and 20\", trigger: \"blur\" }\r\n        ],\r\n        confirmPassword: [\r\n          { required: true, message: \"Confirm password can not be blank\", trigger: \"blur\" },\r\n          { required: true, validator: equalToPassword, trigger: \"blur\" }\r\n        ]\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    submit() {\r\n      this.$refs[\"form\"].validate(valid => {\r\n        if (valid) {\r\n          updateUserPwd(this.user.oldPassword, this.user.newPassword).then(\r\n            response => {\r\n              if (response.code === 200) {\r\n                this.msgSuccess(\"Successfully modified\");\r\n              }\r\n            }\r\n          );\r\n        }\r\n      });\r\n    },\r\n    close() {\r\n      this.$store.dispatch(\"tagsView/delView\", this.$route);\r\n      this.$router.push({ path: \"/index\" });\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"sourceRoot":"src/views/system/user/profile"}]}