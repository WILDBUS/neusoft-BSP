{"remainingRequest":"E:\\jeethink前后分离开发框架\\jeethink快速开发框架（前后分离）_V2.3\\jeethink-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\jeethink前后分离开发框架\\jeethink快速开发框架（前后分离）_V2.3\\jeethink-ui\\src\\views\\system\\user\\profile\\resetPwd.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\jeethink前后分离开发框架\\jeethink快速开发框架（前后分离）_V2.3\\jeethink-ui\\src\\views\\system\\user\\profile\\resetPwd.vue","mtime":1594018137818},{"path":"E:\\jeethink前后分离开发框架\\jeethink快速开发框架（前后分离）_V2.3\\jeethink-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\jeethink前后分离开发框架\\jeethink快速开发框架（前后分离）_V2.3\\jeethink-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\jeethink前后分离开发框架\\jeethink快速开发框架（前后分离）_V2.3\\jeethink-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\jeethink前后分离开发框架\\jeethink快速开发框架（前后分离）_V2.3\\jeethink-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { updateUserPwd } from \"@/api/system/user\";\r\n\r\nexport default {\r\n  data() {\r\n    const equalToPassword = (rule, value, callback) => {\r\n      if (this.user.newPassword !== value) {\r\n        callback(new Error(\"Passwords entered twice are not same\"));\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n    return {\r\n      test: \"1test\",\r\n      user: {\r\n        oldPassword: undefined,\r\n        newPassword: undefined,\r\n        confirmPassword: undefined\r\n      },\r\n      // 表单校验\r\n      rules: {\r\n        oldPassword: [\r\n          { required: true, message: \"Old password cannot be empty\", trigger: \"blur\" }\r\n        ],\r\n        newPassword: [\r\n          { required: true, message: \"New password cannot be empty\", trigger: \"blur\" },\r\n          { min: 6, max: 20, message: \"Length between 6 and 20\", trigger: \"blur\" }\r\n        ],\r\n        confirmPassword: [\r\n          { required: true, message: \"Confirm password can not be blank\", trigger: \"blur\" },\r\n          { required: true, validator: equalToPassword, trigger: \"blur\" }\r\n        ]\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    submit() {\r\n      this.$refs[\"form\"].validate(valid => {\r\n        if (valid) {\r\n          updateUserPwd(this.user.oldPassword, this.user.newPassword).then(\r\n            response => {\r\n              if (response.code === 200) {\r\n                this.msgSuccess(\"Successfully modified\");\r\n              }\r\n            }\r\n          );\r\n        }\r\n      });\r\n    },\r\n    close() {\r\n      this.$store.dispatch(\"tagsView/delView\", this.$route);\r\n      this.$router.push({ path: \"/index\" });\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["resetPwd.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"resetPwd.vue","sourceRoot":"src/views/system/user/profile","sourcesContent":["<template>\r\n  <el-form ref=\"form\" :model=\"user\" :rules=\"rules\" label-width=\"80px\">\r\n    <el-form-item label=\"Old\" prop=\"oldPassword\">\r\n      <el-input v-model=\"user.oldPassword\" placeholder=\"Please enter the old password\" type=\"password\" />\r\n    </el-form-item>\r\n    <el-form-item label=\"New\" prop=\"newPassword\">\r\n      <el-input v-model=\"user.newPassword\" placeholder=\"Please enter the new password\" type=\"password\" />\r\n    </el-form-item>\r\n    <el-form-item label=\"Confirm\" prop=\"confirmPassword\">\r\n      <el-input v-model=\"user.confirmPassword\" placeholder=\"Please confirm your password\" type=\"password\" />\r\n    </el-form-item>\r\n    <el-form-item>\r\n      <el-button type=\"primary\" size=\"mini\" @click=\"submit\">Submit</el-button>\r\n      <el-button type=\"danger\" size=\"mini\" @click=\"close\">Close</el-button>\r\n    </el-form-item>\r\n  </el-form>\r\n</template>\r\n\r\n<script>\r\nimport { updateUserPwd } from \"@/api/system/user\";\r\n\r\nexport default {\r\n  data() {\r\n    const equalToPassword = (rule, value, callback) => {\r\n      if (this.user.newPassword !== value) {\r\n        callback(new Error(\"Passwords entered twice are not same\"));\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n    return {\r\n      test: \"1test\",\r\n      user: {\r\n        oldPassword: undefined,\r\n        newPassword: undefined,\r\n        confirmPassword: undefined\r\n      },\r\n      // 表单校验\r\n      rules: {\r\n        oldPassword: [\r\n          { required: true, message: \"Old password cannot be empty\", trigger: \"blur\" }\r\n        ],\r\n        newPassword: [\r\n          { required: true, message: \"New password cannot be empty\", trigger: \"blur\" },\r\n          { min: 6, max: 20, message: \"Length between 6 and 20\", trigger: \"blur\" }\r\n        ],\r\n        confirmPassword: [\r\n          { required: true, message: \"Confirm password can not be blank\", trigger: \"blur\" },\r\n          { required: true, validator: equalToPassword, trigger: \"blur\" }\r\n        ]\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    submit() {\r\n      this.$refs[\"form\"].validate(valid => {\r\n        if (valid) {\r\n          updateUserPwd(this.user.oldPassword, this.user.newPassword).then(\r\n            response => {\r\n              if (response.code === 200) {\r\n                this.msgSuccess(\"Successfully modified\");\r\n              }\r\n            }\r\n          );\r\n        }\r\n      });\r\n    },\r\n    close() {\r\n      this.$store.dispatch(\"tagsView/delView\", this.$route);\r\n      this.$router.push({ path: \"/index\" });\r\n    }\r\n  }\r\n};\r\n</script>\r\n"]}]}